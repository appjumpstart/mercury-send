const inject = require('light-my-request')
const mercurySend = require('../')

test('sending a string', async () => {
  try {
    const handler = (req, res) => {
      mercurySend(req, res, () => res.send('Hello!'))
    }
    const response = await inject(handler, { url: '/' })
    expect(response.payload).toBe('Hello!')
  } catch (err) {
    fail(err)
  }
})

test('sending an object', async () => {
  try {
    const handler = (req, res) => {
      mercurySend(req, res, () => res.send({ message: 'Hello!' }))
    }
    const response = await inject(handler, { url: '/' })
    const payload = JSON.parse(response.payload)
    expect(payload.message).toBe('Hello!')
  } catch (err) {
    fail(err)
  }
})

test('sending an array', async () => {
  try {
    const handler = (req, res) => {
      mercurySend(req, res, () => res.send(['sugar', 'rush']))
    }
    const response = await inject(handler, { url: '/' })
    const payload = JSON.parse(response.payload)
    expect(payload).toContain('sugar', 'rush')
  } catch (err) {
    fail(err)
  }
})

test('sending a string generated by res.stringify', async () => {
  try {
    const stringify = jest.fn(JSON.stringify)
    const message = { message: 'Hello!' }
    const handler = (req, res) => {
      res.stringify = stringify
      mercurySend(req, res, () => res.send(message))
    }
    const response = await inject(handler, { url: '/' })
    const payload = JSON.parse(response.payload)
    expect(payload.message).toBe('Hello!')
    expect(stringify).toHaveBeenCalledTimes(1)
    expect(stringify).toHaveBeenCalledWith(message)
  } catch (err) {
    fail(err)
  }
})

test('sending a string generated by res.stringify property', async () => {
  try {
    const stringify = { 201: jest.fn(JSON.stringify) }
    const message = { message: 'Hello!' }
    const handler = (req, res) => {
      res.stringify = stringify
      mercurySend(req, res, () => {
        res.writeHead(201, { 'Content-Type': 'application/json' })
        res.send(message)
      })
    }
    const response = await inject(handler, { url: '/' })
    const payload = JSON.parse(response.payload)
    expect(response.statusCode).toBe(201)
    expect(payload.message).toBe('Hello!')
    expect(stringify[201]).toHaveBeenCalledTimes(1)
    expect(stringify[201]).toHaveBeenCalledWith(message)
  } catch (err) {
    fail(err)
  }
})

